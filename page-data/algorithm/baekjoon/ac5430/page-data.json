{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/algorithm/baekjoon/ac5430/",
    "result": {"data":{"cur":{"id":"a363f124-a940-52b5-bc6f-fb64b00372e1","html":"<p><a href=\"https://www.acmicpc.net/problem/5430\"><img src=\"https://d2gd6pc034wcta.cloudfront.net/images/logo@2x.png\" alt=\"백준\"></a></p>\n<div style=\"text-align:center\"><a href=\"https://www.acmicpc.net/problem/5430\">https://www.acmicpc.net/problem/5430</a></div>\n<hr>\n<ul>\n<li>문제 자체는 단순하다. 명령대로 R일 경우 순서를 뒤집고, D일 경우 앞에서 하나를 빼준다.</li>\n<li>하지만 일일히 뒤집으면 시간이 오래 걸리므로 인덱스 left,right를 선언하여 한칸씩 움직여봤다.</li>\n</ul>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">BufferedReader</span> br<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">BufferedWriter</span> bw<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> min <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>Exception</span> <span class=\"token punctuation\">{</span>\r\n        br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">//결과를 위한 StringBuilder</span>\r\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">//TestCase</span>\r\n        <span class=\"token keyword\">int</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">//String.charAt() 보다 char[] 탐색이 빨라서 변경</span>\r\n            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cmds <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token comment\">//배열의 길이</span>\r\n            <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token comment\">//오른쪽인덱스는 배열의 길이보다 하나작게</span>\r\n            <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token comment\">//왼쪽인덱스는 0부터</span>\r\n            <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\r\n            <span class=\"token comment\">//배열 입력</span>\r\n            <span class=\"token class-name\">String</span> ar <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token comment\">//앞뒤의 []을 제거해준다.</span>\r\n            ar <span class=\"token operator\">=</span> ar<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ar<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token comment\">// , 기준으로 배열로 변환</span>\r\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> ar<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n            <span class=\"token comment\">// 에러나지 않고 내용물을 출력해주는 신호 print_flag와 R명령어 인식을 위한 reverse_flag 선언</span>\r\n            <span class=\"token keyword\">boolean</span> print_flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> reverse_flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\r\n            <span class=\"token comment\">//커맨드 배열에서 하나씩 꺼내서 실행한다.</span>\r\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> cmd <span class=\"token operator\">:</span> cmds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//명령어 R일 경우 배열을 뒤집어야 하지만 그냥 인덱스 처리만 뒤집기 위한 reverse_flag 조작</span>\r\n                    reverse_flag <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>reverse_flag<span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//명령어 D일 경우</span>\r\n                    <span class=\"token comment\">//R이 안나왔다면 맨 앞 값을 제거해야하지만 left 인덱스 증가</span>\r\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>reverse_flag<span class=\"token punctuation\">)</span>\r\n                        left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n                    <span class=\"token comment\">//R이 나왔다면 맨 뒤 값을 제거해야하지만 right 인덱스를 감소</span>\r\n                    <span class=\"token keyword\">else</span>\r\n                        right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\r\n\r\n                    <span class=\"token comment\">//만약 left인덱스가 right + 1한 값보다 크다면 에러, +1 한 이유는 빈 배열도 출력해야한다.</span>\r\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                        print_flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n                    <span class=\"token punctuation\">}</span>\r\n                <span class=\"token punctuation\">}</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            <span class=\"token comment\">//출력</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>print_flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'['</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token comment\">//인덱스 증가를 뒤집어졌다면 1씩 내려가고 아니라면 1씩 올라가면서 출력</span>\r\n                <span class=\"token keyword\">int</span> step <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reverse_flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                    step <span class=\"token operator\">*=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n\r\n                <span class=\"token comment\">//시작 인덱스는 뒤집어 졌다면 right 아니면 left부터 시작</span>\r\n                <span class=\"token comment\">//인덱스 범위는 left와 right안에 있다.</span>\r\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>reverse_flag <span class=\"token operator\">?</span> right <span class=\"token operator\">:</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;=</span> right <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">>=</span> left<span class=\"token punctuation\">;</span> index <span class=\"token operator\">+=</span> step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                    sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>reverse_flag <span class=\"token operator\">?</span> left <span class=\"token operator\">:</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token comment\">//완성된 String 출력</span>\r\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<ul>\n<li>위와 같이 푸는 방식도 있지만 java에는 Deque 클래스가 있으므로 일일히 구현할 필요 없이 이미 구현된 클래스를 사용하여도 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Deque</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>Exception</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> ar<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token comment\">//Deque를 선언하여 값을 하나씩 넣어준다.</span>\r\n            <span class=\"token class-name\">Deque</span> dq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                dq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n\r\n            <span class=\"token keyword\">boolean</span> print_flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> reverse_flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> cmd <span class=\"token operator\">:</span> cmds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                    reverse_flag <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>reverse_flag<span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmd <span class=\"token operator\">==</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                    <span class=\"token comment\">//Deque가 비어있는데 삭제를 요청했으므로 에러를 출력하고 반복문을 종료</span>\r\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dq<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                        print_flag <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>print_flag<span class=\"token punctuation\">;</span>\r\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n                    <span class=\"token punctuation\">}</span>\r\n\r\n                    <span class=\"token comment\">// Deque가 그대로라면 앞에서 삭제</span>\r\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>reverse_flag<span class=\"token punctuation\">)</span>\r\n                        dq<span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                    <span class=\"token comment\">// Deque가 뒤집어졌다면 뒤에서 삭제</span>\r\n                    <span class=\"token keyword\">else</span>\r\n                        dq<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n                <span class=\"token punctuation\">}</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>print_flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token comment\">//Deque가 빌때까지 반복</span>\r\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dq<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                    <span class=\"token comment\">//reverse_flag가 true면 뒤에서 하나씩 꺼내고 false라면 앞에서 하나씩 꺼내어 문장에 붙인다.</span>\r\n                    sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>reverse_flag <span class=\"token operator\">?</span> dq<span class=\"token punctuation\">.</span><span class=\"token function\">pollLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> dq<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>dq<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","excerpt":"백준 문제 자체는 단순하다. 명령대로 R일 경우 순서를 뒤집고, D일 경우 앞에서 하나를 빼준다. 하지만 일일히 뒤집으면 시간이 오래 걸리므로 인덱스 left,right를 선언하여 한칸씩 움직여봤다. 위와 같이 푸는 방식도 있지만 java에는 Deque 클래스가 있으므로 일일히 구현할 필요 없이 이미 구현된 클래스를 사용하여도 된다.","frontmatter":{"date":"May 31, 2021","title":"AC","categories":"알고리즘","author":"Jard","emoji":"🧢"},"fields":{"slug":"/algorithm/baekjoon/ac5430/"}},"next":{"id":"7d156331-a077-560e-a256-f6ae6e011032","html":"<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/42585\"><img src=\"https://programmers.co.kr/assets/bi-symbol-light-49a242793b7a8b540cfc3489b918e3bb2a6724f1641572c14c575265d7aeea38.png\" alt=\"프로그래머스\"></a></p>\n<div style=\"text-align:center\"><a href=\"https://programmers.co.kr/learn/courses/30/lessons/42585\">https://programmers.co.kr/learn/courses/30/lessons/42585</a></div>\n<hr>\n<ul>\n<li>주어진 숫자를 붙여 가며 사칙연산을 통과시켜 값을 확인한다.</li>\n<li>N이 1부터 9이하로 주어지니 반복횟수를 맞추기 위해 0부터 8로한다.</li>\n<li>처음 식은 5가 주어지고 사칙연산을 붙일 수 없으니 카운트 1부터 사칙연산으로 나눠진다.</li>\n<li>그런식으로 각 dfs들이 목표 숫자에 도달했을때 최소 값인지 비교하여 대입한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">//target과 써야하는 숫자 n을 함수 호출시 매개변수가 늘어나므로 매개변수로 쓰기보다 전역변수로 빼 놓는다.</span>\r\n    <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>min<span class=\"token operator\">=</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        target <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\r\n        n <span class=\"token operator\">=</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">//0부터 시작</span>\r\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> min <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> min<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n\r\n    <span class=\"token comment\">//카운트는 0부터 8, 이전에 생성된 숫자를 num으로 받는다.</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">//count는 0부터 8로 9번 그보다 크면 -1을 돌려준다.</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            min <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token comment\">//생성된 숫자가 목표 값일 경우</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">//기존의 목표 생성까지 최소 카운트 값과 비교하여 더 작을 경우 min에 대입한다.</span>\r\n            min <span class=\"token operator\">=</span> min<span class=\"token operator\">&lt;</span>count<span class=\"token operator\">?</span>min<span class=\"token operator\">:</span>count<span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n\r\n        <span class=\"token keyword\">int</span> tempN <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">//현재 카운트에서 8까지 접근할 만큼 dfs를 반복한다.</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span> <span class=\"token operator\">-</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">int</span> newCount <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>newCount<span class=\"token punctuation\">,</span> num <span class=\"token operator\">+</span> tempN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>newCount<span class=\"token punctuation\">,</span> num <span class=\"token operator\">-</span> tempN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>newCount<span class=\"token punctuation\">,</span> num <span class=\"token operator\">*</span> tempN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>newCount<span class=\"token punctuation\">,</span> num <span class=\"token operator\">/</span> tempN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n            <span class=\"token comment\">//현재 만든 숫자를 한칸 앞으로 밀고 n을 추가하여 숫자를 만든다.</span>\r\n            tempN <span class=\"token operator\">=</span> tempN <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"May 30, 2021","title":"N으로 표현","categories":"알고리즘","author":"Jard","emoji":"🧢"},"fields":{"slug":"/algorithm/programmers/programmers42585/"}},"prev":{"id":"0cb0e790-ba1b-50bf-90fd-b3e56bf89192","html":"<p><a href=\"https://www.acmicpc.net/problem/14888\"><img src=\"https://d2gd6pc034wcta.cloudfront.net/images/logo@2x.png\" alt=\"백준\"></a></p>\n<div style=\"text-align:center\"><a href=\"https://www.acmicpc.net/problem/14888\">https://www.acmicpc.net/problem/14888</a></div>\n<hr>\n<ul>\n<li>연산자의 갯수가 주어지고 주어진 숫자 배열에 끼워 넣어 만든 값의 최대,최소 값을 출력하는 문제</li>\n<li>연산자 하나 끼워서 계산해보고 다시 빼서 다른거 끼워보며 연산을 하는 과정으로 생각하면 편하다.</li>\n</ul>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">BufferedReader</span> br<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">BufferedWriter</span> bw<span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">//dfs를 쓰기 위해 크기(n), 최소값(min), 최대값(max)를 전역 변수로 선언한다.</span>\r\n    <span class=\"token comment\">//max는 비교하여 넣기 위해 int의 최소값을, min은 비교하여 최소 값이 들어가야하므로 최대값을 미리 넣어놓는다.</span>\r\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> min <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">//숫자배열(numbers), 연산자(oper)는 +,-,*,/ 순서로 갯수가 주어지므로 길이가 4인 배열을 선언한다.</span>\r\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token punctuation\">,</span> oper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>Exception</span> <span class=\"token punctuation\">{</span>\r\n        br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        n <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">//숫자 배열을 문자열 한줄로 입력 받아 띄어쓰기로 분리해주는 StringTokenizer에 담아 하나씩 꺼내쓴다.</span>\r\n        <span class=\"token class-name\">StringTokenizer</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        numbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n            numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token comment\">//연산자도 위와 같은 방법을 사용한다.</span>\r\n        st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n            oper<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token comment\">//첫번째 숫자와 숫자 하나를 사용했으므로 다음 값을 찾기 위해 인덱스를 하나 늘려서 1로 전달한다.</span>\r\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">//전달 받은 인덱스값이 n과 같다는것은 배열의 범위보다 1크므로 모든배열을 탐색했다는 의미를 가진다.</span>\r\n        <span class=\"token comment\">//연산이 끝났으므로 값을 최소 최대를 비교하여 넣고 함수를 끝낸다.</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            min <span class=\"token operator\">=</span> min <span class=\"token operator\">></span> num <span class=\"token operator\">?</span> num <span class=\"token operator\">:</span> min<span class=\"token punctuation\">;</span>\r\n            max <span class=\"token operator\">=</span> max <span class=\"token operator\">&lt;</span> num <span class=\"token operator\">?</span> num <span class=\"token operator\">:</span> max<span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n\r\n        <span class=\"token comment\">//연산자 4개 반복</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">//주어진 연산자 갯수가 있다면</span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oper<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token comment\">//꺼내쓰므로 -1 한다.</span>\r\n                oper<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token comment\">//연산자에 따라 탐색을 달리하고 다음 숫자를 꺼내기 위해 index+1을 한다.</span>\r\n                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\r\n                        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> numbers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n                    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\r\n                        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> numbers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n                    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\r\n                        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">*</span> numbers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n                    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\r\n                        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">/</span> numbers<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n                <span class=\"token comment\">//위의 연산이 끝났다면 사용한 연산자를 돌려준다.</span>\r\n                oper<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"May 31, 2021","title":"연산자 끼워넣기","categories":"알고리즘","author":"Jard","emoji":"🧢"},"fields":{"slug":"/algorithm/baekjoon/ac14888/"}},"site":{"siteMetadata":{"siteUrl":"https://blueti.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/algorithm/baekjoon/ac5430/","nextSlug":"/algorithm/programmers/programmers42585/","prevSlug":"/algorithm/baekjoon/ac14888/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}