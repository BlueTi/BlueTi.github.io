{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/algoritm/baekjoon/ac1874","result":{"data":{"markdownRemark":{"id":"b5e0b379-2caf-54ee-88a6-8d89dfa501a6","html":"<p><a href=\"https://www.acmicpc.net/problem/1874\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://d2gd6pc034wcta.cloudfront.net/images/logo@2x.png\" alt=\"백준\"></a></p>\n<div style=\"text-align:center\"><a href=\"https://www.acmicpc.net/problem/1874\">https://www.acmicpc.net/problem/1874</a></div>\n<hr>\n<ul>\n<li>1부터 N까지 수열이 쌓여 있고 거기서 하나씩 넣고 꺼내는 방식이다.</li>\n<li>\n<p>예제에 따라 1부터 8까지 있다고 할때 처음 모양은 이러하다.</p>\n<table>\n<thead>\n<tr>\n<th>input</th>\n<th align=\"center\">stack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>4</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"center\"></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>처음 꺼내야하는 값이 4이므로 1부터 4까지를 stack에 넣고 +를 출력해줄때 상황</p>\n<table>\n<thead>\n<tr>\n<th>input</th>\n<th align=\"center\">stack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody>\n</table>\n<h3>output: + + + +</h3>\n</li>\n<li>\n<p>그리고 4를 출력에 넣고 -를 출력한다.</p>\n<table>\n<thead>\n<tr>\n<th>input</th>\n<th align=\"center\">stack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody>\n</table>\n<h3>output: + + + + -</h3>\n</li>\n<li>\n<p>그 다음 스택의 맨위의 값이 요구는 숫자 3과 같으므로 꺼낸다.</p>\n<table>\n<thead>\n<tr>\n<th>input</th>\n<th align=\"center\">stack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody>\n</table>\n<h3>output: + + + + - -</h3>\n</li>\n<li>\n<p>다음 숫자는 6이니 6까지 숫자를 넣어준다.</p>\n<table>\n<thead>\n<tr>\n<th>input</th>\n<th align=\"center\">stack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody>\n</table>\n<h3>output: + + + + - - + +</h3>\n</li>\n<li>\n<p>stack의 맨 위가 6이 되었으므로 출력</p>\n<table>\n<thead>\n<tr>\n<th>input</th>\n<th align=\"center\">stack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody>\n</table>\n<h3>output: + + + + - - + + -</h3>\n</li>\n<li>위와 같은 동작을 반복한다.</li>\n<li>만약 목표값이 현재 수열의 맨 위의 값보다 작은데 같지 않은 경우는 접근할 방법이 없으므로 NO를 출력한다.</li>\n</ul>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stack</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BufferedWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> goal <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//목표가 현재 숫자보다 작은경우</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>goal <span class=\"token operator\">></span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//num이 목표와 같아질때까지 반복</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> goal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">//num을 늘려주면서 stack에 입력</span>\n                    num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">//목표가 현재숫자와 같거나 큰 상황에 스택 최상위 값과 같지 않을 경우</span>\n            <span class=\"token comment\">//아래 숫자로 접근할 수 없으므로 No를 출력</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> goal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                bw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                bw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">//목표가 현재숫자와 같은 경우</span>\n            <span class=\"token comment\">//스택에서 맨 위의 값을 꺼내고 -를 출력한다.</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/posts/algoritm/baekjoon/ac1874","tagSlugs":["/tag/알고리즘/","/tag/백준/","/tag/1874/","/tag/문제풀이/","/tag/python/"]},"frontmatter":{"date":"2021-04-08T16:22:37.121Z","description":"백준 1874번 문제","tags":["알고리즘","백준","1874","문제풀이","python"],"title":"스택 수열","socialImage":{"publicURL":"/static/fa3b9336577a6006fbb3a81169f4e8b9/algorithm.png"}}}},"pageContext":{"slug":"/posts/algoritm/baekjoon/ac1874"}},"staticQueryHashes":["251939775","401334301","825871152"]}